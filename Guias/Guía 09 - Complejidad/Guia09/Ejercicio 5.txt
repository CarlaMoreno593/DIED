-Inciso 1:
	
	public static long f1(int a, int n){
		long b = 1;
		
		for(int k = 0; k < n; k++){
			b = b * a;
		}
		
		return b;
	}

	-a=2, n=6

			b=1
		i=0 b=b*a = 2
		i=1 b=2*2 = 4
		i=2 b=4*2 = 8
		i=3 b=8*2 = 16
		i=4 b=16*2 = 32
		i=5 b=32*2 = 64

	Retorna el resultado de un nÃºmero a elevado a n

	Complejidad -> O(N), el peor caso es siempre el mismo, ejecuta siempre N operaciones

-Inciso 2:
	
	public static long f2(int a, int n){
		
		long b = 1;
		long c = a;

		for(int k = n; k > 0;){

			if(k%2 == 0) {

				k = k / 2;
				c = c * c;

			} else {

				k--;
				b = b * c;
			
			}
		}

		return b;
	}

	-a=2 , n=6

			k=6		b=1 	c=2 	
		i=0 k=3		b=1		c=2*2 		
		i=1 k=2		b=4*1	c=4 		
		i=2 k=1		b=4		c=4*4 		
		i=3 k=0		b=4*16	c=16 		

	-a=2 , n=8

			k=8		b=1 		c=2 	
		i=0 k=4		b=1			c=2*2 		
		i=1 k=2		b=1			c=4*4 = 16		
		i=2 k=1		b=1		    c=16*4 = 256 		
		i=3 k=0		b=16*4*1	c=4*4*4

		Termina. b = 256	

		Retorna lo mismo que el anterior. 

		N/2, N/2-1, N/4, N/4-1, N/8, N/8-1,..., 2 , 1, 0

		require de log2N operaciones para un N.

		O(logN)
